# $Id$
package KNP::Result;
require 5.000;
use Exporter;
use KNP::BList;
use KNP::Bunsetsu;
use KNP::Morpheme;
use KNP::Tag;
use strict;
use vars qw/ @ISA %DEFAULT /;
@ISA = qw/ KNP::BList Exporter /;

=head1 NAME

KNP::Result - 構文解析結果オブジェクト

=head1 SYNOPSIS

  $result = new KNP::Result( "* -1D <BGH:解析>\n...\nEOS\n", "^EOS$" );

=head1 DESCRIPTION

構文解析結果を保持するオブジェクト．

=head1 CONSTRUCTOR

=over 4

=item new ( RESULT, EOS_PATTERN )

KNP の出力文字列，または，その文字列を行を単位として格納されたリストに
対するリファレンス RESULT と，その構文解析結果を終端するためのパターン 
EOS_PATTERN を引数として呼び出すと，その構文解析結果を表すオブジェクト
を生成する．

=item new ( OPTIONS )

以下の拡張オプションを指定してコンストラクタを呼び出す．

=over 4

=item result => RESULT

KNP の出力文字列，または，その文字列を行を単位として格納されたリストに
対するリファレンスを指定する．

=item pattern => STRING

構文解析結果を終端するためのパターンを指定する．

=item bclass => NAME

文節オブジェクトを指定する．無指定の場合は，C<KNP::Bunsetsu> を用いる．

=item mclass => NAME

形態素オブジェクトを指定する．無指定の場合は，C<KNP::Morpheme> を用いる．

=item tclass => NAME

タグオブジェクトを指定する．無指定の場合は，C<KNP::Tag> を用いる．

=back

=cut
%DEFAULT = qw/ bclass KNP::Bunsetsu
	       mclass KNP::Morpheme
	       tclass KNP::Tag /;

sub new {
    my $class = shift;

    my( $result, $pattern, $bclass, $mclass, $tclass );
    if( @_ == 2 ){
	( $result, $pattern ) = @_;
    } else {
	my %opt;
	while( @_ ){
	    my $key = shift;
	    my $val = shift;
	    $key =~ s/^-+//;
	    $opt{lc($key)} = $val;
	}
	$result  = $opt{result};
	$pattern = $opt{pattern};
	$bclass  = $opt{bclass};
	$mclass  = $opt{mclass};
	$tclass  = $opt{tclass};
    }
    $bclass ||= $DEFAULT{bclass};
    $mclass ||= $DEFAULT{mclass};
    $tclass ||= $DEFAULT{tclass};

    # 文字列が直接指定された場合
    $result = [ map( "$_\n", split( /\n/, $result ) ) ] unless ref $result;

    my $this = { all => join( '', @$result ) };
    bless $this, $class;
    return $this unless $pattern;

    # 構文解析結果の先頭に含まれているコメントとエラーの部分を取り除く
    my( $str, $comment, $error );
    while( defined( $str = shift @$result ) ){
	if( $str =~ /^#/ ){
	    $comment .= $str;
	} elsif( $str =~ m!^;;! ){
	    $error .= $str;
	} else {
	    unshift( @$result, $str );
	    last;
	}
    }

    while( defined( $str = shift @$result ) ){
	if( $str =~ m!$pattern! and @$result == 0 ){
	    $this->{_eos} = $str;
	    last;
	} elsif( $str =~ m!^;;! ){
	    $error .= $str;
	} elsif( $str =~ m!^\*! ){
	    $this->push_bnst( $bclass->new( $str, scalar($this->bnst) ) );
	} elsif( $str =~ m!^\+! ){
	    $this->push_tag( $tclass->new( $str, scalar($this->tag) ) );
	} else {
	    $this->push_mrph( $mclass->new( $str, scalar($this->mrph) ) );
	}
    }

    # 係り受け情報を取り出す
    my( @bnst ) = $this->bnst;
    for my $bnst ( @bnst ){
	$bnst->make_reference( \@bnst );
    }
    my( @tag ) = $this->tag;
    for my $tag ( @tag ){
	$tag->make_reference( \@tag );
    }

    # 書き込みを禁止する
    $this->set_readonly();

    $this->{comment} = $comment;
    $this->{error}   = $error;
    $this;
}

=back

=head1 METHODS

構文解析結果は，対象となる文を文節単位に分解したリストと見ることができ
る．そのため，本クラスは C<KNP::BList> クラスを継承するように実装され
ており，以下のメソッドが利用可能である．

=over 4

=item bnst

文節列を取り出す．

=item tag

タグ列を取り出す．

=item mrph

形態素列を取り出す．

=back

これらのメソッドの詳細については，L<KNP::BList> を参照のこと．

加えて，以下のメソッドが定義されている．

=over 4

=item all

構文解析結果の全文字列を返す．

=cut
sub all {
    my( $this ) = @_;
    $this->{all} || undef;
}

=item comment

構文解析結果中のコメントを返す．

=cut
sub comment {
    my( $this ) = @_;
    $this->{comment} || undef;
}

=item error

構文解析結果中のエラーメッセージを返す．

=cut
sub error {
    my( $this ) = @_;
    $this->{error} || undef;
}

=item id

構文解析結果IDを得る．

=cut
sub id {
    my $this = shift;
    if( @_ ){
	$this->set_id( @_ );
    } else {
	unless( defined $this->{_id} ){
	    $this->{_id} = $this->{comment} =~ m/# S-ID:([-0-9]+)/ ? $1 : -1;
	}
	$this->{_id};
    }
}

=item set_id ( ID )

構文解析結果IDを設定する．

=cut
sub set_id {
    my( $this, $id ) = @_;
    if( defined $this->{comment} ){
	( $this->{comment} =~ s/# S-ID:[-0-9]+/# S-ID:$id/ )
	    or ( $this->{comment} = "S-ID:$id\n" . $this->{comment} );
    } else {
	$this->{comment} = "S-ID:$id\n";
    }
    $this->{_id} = $id;
}

=item spec

構文解析結果を表現する文字列を生成する．

=cut
sub spec {
    my( $this ) = @_;
    sprintf( "# S-ID:%s\n%s%s",
	     $this->id,
	     $this->KNP::BList::spec(),
	     $this->{_eos} );
}

=back

=head1 SEE ALSO

=over 4

=item *

L<KNP::BList>

=back

=head1 AUTHOR

=over 4

=item
土屋 雅稔 <tsuchiya@pine.kuee.kyoto-u.ac.jp>

=cut

1;
__END__
# Local Variables:
# mode: perl
# coding: euc-japan
# use-kuten-for-period: nil
# use-touten-for-comma: nil
# End:
